package HirakataPapark::Service::Build::TranslateLangDictToJSONAndSave::HistoryManager {

  use Mouse;
  use HirakataPapark;
  use Data::Dumper;
  use Path::Tiny qw( path );
  use Mojo::Util qw( class_to_path );

  use constant DEFAULT_RECORD_FILE_NAME => '.lang_dicts_hitstory.pl';
  
  has 'json_dir_root' => (
    is       => 'ro',
    isa      => 'Str',
    required => 1,
  );

  has 'record_file_name' => (
    is      => 'ro',
    isa     => 'Str',
    default => DEFAULT_RECORD_FILE_NAME,
  );

  has 'record_file_path' => (
    is      => 'ro',
    isa     => 'Str',
    lazy    => 1,
    builder => '_build_record_file_path',
  );

  has 'record_file' => (
    is      => 'ro',
    isa     => 'Path::Tiny',
    lazy    => 1,
    builder => '_build_record_file',
  );

  has 'history_record' => (
    is      => 'ro',
    isa     => 'HashRef[HashRef]',
    lazy    => 1,
    builder => 'load_record',
  );

  sub _build_record_file_path($self) {
    $self->json_dir_root . $self->record_file_name;
  }

  sub _build_record_file($self) {
    path $self->record_file_path;
  }

  sub load_record($self) {
    $self->record_file->spew('{}') unless $self->record_file->exists;
    do $self->record_file_path;
  }

  sub is_class_need_translate($self, $class_name) {
    my $path = class_to_path $class_name;
    my $file = path $INC{$path};
    $self->get_record($file)->{mtime} <= $file->stat->mtime;
  }

  sub get_record($self, $file) {
    $self->history_record->{$file} //= {
      name  => $file->stringify,
      mtime => $file->stat->mtime,
    };
  }

  sub save_record($self) {
    my $dumper = Data::Dumper->new([$self->history_record]);
    $dumper->Terse(1);
    $dumper->Indent(1);
    my $history_template = <<"EOS";
# manege file of generate file from perl
# this file is generated by @{[ ref $self ]}. Don't edit this file;
use utf8;

@{[ $dumper->Dump ]}

EOS
    $self->record_file->spew($history_template);
  }

  __PACKAGE__->meta->make_immutable;

}

1;
